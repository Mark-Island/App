# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

#
# This action runs whenever a PR is created.
#
# It will merge the validated "Package.swift" and "Source/" sources and 
# build and release an "App-Org.zip" package for end-user installation.
#

name: Deploy PR
on:
  pull_request_target:
    branches: [ main ]

jobs:
  Deploy:
    # the App-Org name is the org that submitted the PR
    name: "Release ${{ github.event.pull_request.head.user.login }}"
    if: github.event_name == 'pull_request_target' 
    runs-on: macos-11
    timeout-minutes: 10
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.0.app/Contents/Developer

    steps:
      - name: Show Info
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "TAG: ${{ github.event.inputs.branch }}"
          echo "ORGNAME: ${{ github.event.pull_request.head.user.login }}"
          echo "ORGNAME=${{ github.event.pull_request.head.user.login }}" >> $GITHUB_ENV
          echo "COMMITHASH: ${{ github.event.pull_request.head.sha }}"
          echo "COMMITHASH=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PRID: ${{ github.event.pull_request.id }}"
          echo "PRID=${{ github.event.pull_request.id }}" >> $GITHUB_ENV

      - name: Configure App Name
        run: |
          echo "APP_ARTIFACT=${{ env.ORGNAME }}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(echo ${{ env.ORGNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.ORGNAME }})" >> $GITHUB_ENV

      - name: Show Product
        run: |
          echo "BUILDING PRODUCT: ${{ env.PRODUCT_NAME }}"
      
      - name: Checkout Base Repository
        uses: actions/checkout@v2

      - name: "Validate App Org: ${{ env.ORGNAME }}"
        run: xcrun swift run -- fairtool validate --verbose true --hub github.com --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --project .

      - name: Checkout PR
        uses: actions/checkout@v2
        with:
          path: ReleasePR
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1
          submodules: false

      - name: Merging PR
        run: xcrun swift run -- fairtool merge --verbose true --hub github.com --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --project ReleasePR --output .

      - name: Validate Package.resolved
        run: |
          xcrun swift package resolve
          xcrun swift run -- fairtool validate --project . --hub github.com 
          #xcrun swift run -- fairtool edit --project . --hub github.com --bundle-id "${{ env.BUNDLE_ID }}" --display-name "${{ env.PRODUCT_NAME }}"

      - name: "Prepare Staging"
        run: |
          rm -rf "staging/"
          mkdir "staging/"

      - name: "Archive Source"
        run: |
          cp -a .build/checkouts Dependencies
          tar cvzf "staging/${{ env.APP_ARTIFACT }}-source.tgz" --exclude='.git/' --exclude='.build/' --exclude='staging/' .
          rm -rf Dependencies

      - name: Update Info
        run: |
          /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string" App.plist || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier '${{ env.BUNDLE_ID }}'" App.plist
          /usr/libexec/PlistBuddy -c "Add :CFBundleDisplayName string" App.plist || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName '${{ env.PRODUCT_NAME }}'" App.plist

      - name: Stage Icon
        run: cp Assets.xcassets/AppIcon.appiconset/Icon.png staging/"${{ env.APP_ARTIFACT }}.png"

      - name: Build macOS Archive
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "Application" \
            -sdk "macosx" \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            MARKETING_VERSION="${{ env.COMMITHASH }}" \
            CURRENT_PROJECT_VERSION="${{ env.PRID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}" 

      - name: Build iOS Archive
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "Application" \
            -sdk "iphoneos" \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            MARKETING_VERSION="${{ env.COMMITHASH }}" \
            CURRENT_PROJECT_VERSION="${{ env.PRID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}" 

      - uses: actions/upload-artifact@v2
        with:
          path: |
            staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive
            staging/${{ env.APP_ARTIFACT }}-iOS.xcarchive

      - name: "Export Archive"
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string></dict></plist>' > "staging/exportOptions.plist"
          xcodebuild \
            -verbose \
            -exportArchive \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/exportOptions.plist"

      - name: "Create ${{ env.APP_ARTIFACT }}.zip"
        run: |
          find staging/ -type f

          echo APP NAME "staging/${{ env.PRODUCT_NAME }}.app"
          ls -la "staging/${{ env.PRODUCT_NAME }}.app"

          echo ZIP NAME "staging/${{ env.APP_ARTIFACT }}.zip"

          ditto -c -k --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.APP_ARTIFACT }}.zip"
          ls -la "staging/${{ env.APP_ARTIFACT }}.zip"

          ls -la "staging/"
            
          unzip -t "staging/${{ env.APP_ARTIFACT }}.zip"

      - name: "Upload Build Artifacts"
        uses: actions/upload-artifact@v2
        with:
          path: |
            staging/${{ env.APP_ARTIFACT }}.zip
            staging/${{ env.APP_ARTIFACT }}.png
            staging/${{ env.APP_ARTIFACT }}-source.tgz

      - name: "Create App Release"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: true
          automatic_release_tag: "${{ env.APP_ARTIFACT }}"
          files: |
            staging/${{ env.APP_ARTIFACT }}.zip
            staging/${{ env.APP_ARTIFACT }}.png
            staging/${{ env.APP_ARTIFACT }}-source.tgz


