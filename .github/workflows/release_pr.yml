# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

#
# This action runs whenever a PR is created.
#
# It will merge the validated "Package.swift" and "Source/" sources and 
# build and release an "App-Org.zip" package for end-user installation.
#

name: Deploy PR
on:
  pull_request_target:
    branches: [ main ]

jobs:
  Deploy:
    # the App-Org name is the org that submitted the PR
    name: "Release ${{ github.event.pull_request.head.user.login }}"
    if: github.event_name == 'pull_request_target' 
    runs-on: macos-11
    timeout-minutes: 15
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.0.app/Contents/Developer

    steps:
      - name: Setup
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "ORGNAME=${{ github.event.pull_request.head.user.login }}" >> $GITHUB_ENV
          echo "COMMITHASH=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PRID=${{ github.event.pull_request.id }}" >> $GITHUB_ENV

      - name: "Configure: ${{ env.ORGNAME }}"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "APP_ARTIFACT=${{ env.ORGNAME }}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(echo ${{ env.ORGNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.ORGNAME }})" >> $GITHUB_ENV
          echo "BUILDING PRODUCT: ${{ env.PRODUCT_NAME }}"
      
      - name: Checkout Base Fairground
        uses: actions/checkout@v2

      - name: "Validate App-Org: ${{ env.ORGNAME }}"
        run: xcrun swift run -- fairtool validate --verbose true --hub github.com/appfair --org "${{ env.ORGNAME }}" --ref "${{ env.COMMITHASH }}" --allow-from '.*.EDU' --allow-from '.*.appfair.net' --token "${{ secrets.GITHUB_TOKEN }}" --project .

      - name: Checkout Integrate PR
        uses: actions/checkout@v2
        with:
          path: ReleasePR
          ref: ${{ env.COMMITHASH }}
          fetch-depth: 1
          submodules: false

      - name: Prepare Integrate PR
        run: |
          rm -rf "staging/"
          mkdir "staging/"

          xcrun swift run -- fairtool merge --verbose true --hub github.com/appfair --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --version-marker-dir "staging/" --project ReleasePR --output .

          xcrun swift package resolve
          xcrun swift run -- fairtool validate --project . --hub github.com/appfair 
          #xcrun swift run -- fairtool edit --project . --hub github.com/appfair --bundle-id "${{ env.BUNDLE_ID }}" --display-name "${{ env.PRODUCT_NAME }}"

          cp -a .build/checkouts Dependencies
          tar cvzf "staging/${{ env.APP_ARTIFACT }}-source.tgz" --exclude='.git/' --exclude='.build/' --exclude='staging/' .
          rm -rf Dependencies

      - name: "Build iOS App: ${{ env.APP_ARTIFACT }}-iOS.ipa"
        # there's no way to export iOS archives without re-signing with a teamID, 
        # so just build the .ipa manually; it needs to be in Staging/ first
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "Application" \
            -sdk "iphoneos" \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}" 
          cp -a "staging/${{ env.APP_ARTIFACT }}-iOS.xcarchive/Products/Applications" "staging/Payload"
          ditto -c -k --sequesterRsrc --keepParent "staging/Payload" "staging/${{ env.APP_ARTIFACT }}-iOS.ipa"
          rm -rf "staging/Payload" # cleanup
          ls -la "staging/${{ env.APP_ARTIFACT }}-iOS.ipa"


      - name: "Build macOS App: ${{ env.APP_ARTIFACT }}-macOS.zip"
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "Application" \
            -sdk "macosx" \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}" 
          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string></dict></plist>' > "staging/exportOptions.plist"
          xcodebuild \
            -exportArchive \
            -archivePath "staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/exportOptions.plist"
          ditto -c -k --sequesterRsrc --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.APP_ARTIFACT }}-macOS.zip"
          ls -la "staging/${{ env.APP_ARTIFACT }}-macOS.zip"

      - name: Stage Release Metadata
        # Extract the Info.plist from the archives themselves, since they contain
        # the same post-processed metadata that the app will use.
        # And convert to XML for ease of integration.
        run: |
          cp Assets.xcassets/AppIcon.appiconset/Icon.png staging/"${{ env.APP_ARTIFACT }}.png"
          plutil -convert xml1 -r -o "staging/${{ env.APP_ARTIFACT }}-macOS.plist" -- "staging/${{ env.APP_ARTIFACT }}-macOS.xcarchive/Products/Applications/${{ env.PRODUCT_NAME }}.app/Contents/Info.plist"
          plutil -convert xml1 -r -o "staging/${{ env.APP_ARTIFACT }}-iOS.plist" -- "staging/${{ env.APP_ARTIFACT }}-iOS.xcarchive/Products/Applications/${{ env.PRODUCT_NAME }}.app/Info.plist"
          find "staging/" -type f


      - name: "Upload Build Artifacts"
        # there can only be a single release artifact at a single time, so we 
        # additionally upload the artifacts for each build for the historical record
        uses: actions/upload-artifact@v2
        with:
          path: staging

      - name: "Create App Release"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: true
          automatic_release_tag: "${{ env.APP_ARTIFACT }}"
          files: |
            Sandbox.entitlements
            Package.resolved
            staging/version-*-*
            staging/${{ env.APP_ARTIFACT }}.png
            staging/${{ env.APP_ARTIFACT }}-macOS.zip
            staging/${{ env.APP_ARTIFACT }}-macOS.plist
            staging/${{ env.APP_ARTIFACT }}-iOS.ipa
            staging/${{ env.APP_ARTIFACT }}-iOS.plist
            staging/${{ env.APP_ARTIFACT }}-source.tgz

      - name: "Update App Fair Catalog"
        run: xcrun swift run -- fairtool catalog --verbose true --hub github.com/appfair --token "${{ secrets.GITHUB_TOKEN }}" -o staging/fairapps.json

      - name: "Refresh App Fair Catalog"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          draft: false
          prerelease: false
          automatic_release_tag: "catalog"
          files: |
            staging/fairapps.json


